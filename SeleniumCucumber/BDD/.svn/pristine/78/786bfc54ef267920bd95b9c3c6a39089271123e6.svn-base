package walgreens.ecom.batch.framework.poc.webservice;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.HTTP;
import org.json.JSONException;
import org.json.JSONObject;
import org.omg.CORBA.portable.InputStream;


public class RestPost {
 String url;


public RestPost(String str) {
  this.url = str;
  //this.nameValuePairs = params;
}

//     private DefaultHttpClient getSecuredHttpClient(HttpClient httpClient) throws Exception {
//	final X509Certificate[] _AcceptedIssuers = new X509Certificate[] {};
//	try {
//		SSLContext ctx = SSLContext.getInstance("TLS");
//		X509TrustManager tm = new X509TrustManager() {
//			@Override
//			public X509Certificate[] getAcceptedIssuers() {
//				return _AcceptedIssuers;
//			}
//			@Override
//			public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
//			}
//			@Override
//			public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
//			}
//		};
//		ctx.init(null, new TrustManager[] { tm }, new SecureRandom());
//		  SSLSocketFactory sslf = new SSLSocketFactory(trusted);
//		    sslf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
//		ClientConnectionManager ccm = httpClient.getConnectionManager();
//		SchemeRegistry sr = ccm.getSchemeRegistry();
//		sr.register(new Scheme("https", 443, ssf));
//		return new DefaultHttpClient(ccm, httpClient.getParams());
//	} catch (Exception e) {
//		throw e;
//	}

@SuppressWarnings({ "resource", "deprecation" })
public String postData() throws Exception {
    
  
 // VARIABLES
    // *********
    String PASSWORD = null;
    String KEYSTOREFILE = null;
    String TRUSTSTOREFILE = null;
    String INPUTFILE = null;
    String URL = null;
    String AUTHUSERNAME = "ecomm";
    String AUTHPASSWORD = "Bi6Id10t";
    String USECERTIFICATION = "YES";
    String USEAUTHENTICATION = "NO";
    // String CONNECTIONTYPE="http";
    String CONNECTIONTYPE = "https";

    // CONNECTION PROPERTIES
    // *********************
    // URL = "https://wagtzdpi.walgreens.com:10045/memberenroll";
    // URL = "http://devsb01.walgreens.com:15030";

    PASSWORD = "changeit";
    KEYSTOREFILE = "C:\\EcomQA\\workspace\\batch9qa_catwoman\\src\\walgreens\\ecom\\batch\\framework\\poc\\webservice\\Certificates\\loyaltyclientKeyStore.jks";
    TRUSTSTOREFILE = "C:\\EcomQA\\workspace\\batch9qa_catwoman\\src\\walgreens\\ecom\\batch\\framework\\poc\\webservice\\Certificates\\wagtzdpiTruststore";
    // INPUTFILE
    // ="C:\\EcomQA\\workspace\\batch9qa_catwoman\\src\\walgreens\\ecom\\batch\\framework\\poc\\webservice\\SOAP_ICPLUS_PSPTSPRSCSvcC2.xml";
    INPUTFILE = "C:" +
    		"C:\\EcomQA\\workspace\\batch9qa_catwoman\\src\\walgreens\\ecom\\batch\\framework\\poc\\webservice\\SOAP_LTY_MEMBERENROLL.xml";

    // SET KEYSTORE_TRUSTSTORE
    System.setProperty("javax.net.ssl.keyStore", KEYSTOREFILE);
    System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
    System.setProperty("javax.net.ssl.trustStore", TRUSTSTOREFILE);
    System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
java.lang.System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
System.setProperty("https.protocols", "TLSv1");
    
    //START HERE NEW 
//*******************************************************************
//    KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
//    trustStore.load(null, null);
//
//    MySSLSocketFactory sf = new MySSLSocketFactory(trustStore);
//    sf.setHostnameVerifier(MySSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
//
//    HttpParams params = new BasicHttpParams();
//    HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
//    HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);
//
//    SchemeRegistry registry = new SchemeRegistry();
//    registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
//    registry.register(new Scheme("https", sf, 443));
//
//    ClientConnectionManager ccm1 = new ThreadSafeClientConnManager(params, registry);

//*******************************************************************

DefaultHttpClient dhc = new DefaultHttpClient();
    	X509TrustManager tm = new X509TrustManager() {
	 
	public void checkClientTrusted(X509Certificate[] xcs, String string) throws CertificateException {
	}
	 
	public void checkServerTrusted(X509Certificate[] xcs, String string) throws CertificateException {
	}
	 
	public X509Certificate[] getAcceptedIssuers() {
	return null;
	}
	};
	
	
	
	SSLContext ctx = SSLContext.getInstance("JKS");
	ctx.init(null, new TrustManager[]{tm}, null);
	SSLSocketFactory ssf = new SSLSocketFactory(ctx);
	
	ClientConnectionManager ccm = dhc.getConnectionManager();
	SchemeRegistry sr = ccm.getSchemeRegistry();
	sr.register(new Scheme("https", ssf, 443));
    
    
  
	  StringBuilder builder = new StringBuilder();
	    
	  HttpClient httpclient = new DefaultHttpClient(ccm, dhc.getParams());
	 // HttpClient httpclient = new DefaultHttpClient();
	  HttpPost httppost = new HttpPost(this.url);
  
  try {
      
      JSONObject json = new JSONObject();
      json.put("t", "anonymous");
      json.put("i", "0");
      json.put("a", "ECOMM");
      StringEntity se = new StringEntity( json.toString());

      httppost.setEntity(se);
      
      HttpResponse response = httpclient.execute(httppost);
      StatusLine statusLine = response.getStatusLine();
      int statusCode = statusLine.getStatusCode();
      System.out.println(statusCode);

      HttpEntity entity = response.getEntity();
      java.io.InputStream content = entity.getContent();
      BufferedReader reader = new BufferedReader(new InputStreamReader(
              content));
      String line;
      while ((line = reader.readLine()) != null) {
          builder.append(line);
      }

  } catch (ClientProtocolException e) {
   System.err.println(e);
  } catch (IOException ioe) {
      System.err.println(ioe);
      // TODO Auto-generated catch block
  }
  finally {

  }
  return builder.toString();
}



}
