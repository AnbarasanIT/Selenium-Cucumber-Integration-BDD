package walgreens.ecom.batch.automation.stepdefinitions.pharmacy.homepage;

import java.util.List;
import java.util.Map;
import org.openqa.selenium.support.events.EventFiringWebDriver;
import walgreens.ecom.batch.automation.library.common.CommonLibrary;
import walgreens.ecom.batch.automation.library.pharmacy.Prescriptions.RefillHubLibrary;
import walgreens.ecom.batch.automation.library.pharmacy.homepage.CommonPharmacyLibrary;
import walgreens.ecom.batch.automation.library.pharmacy.homepage.HomePageLinksAndUIValidationLibrary;
import walgreens.ecom.batch.framework.common.beans.ScenarioBean;
import walgreens.ecom.batch.framework.common.beans.StepBean;
import cucumber.annotation.en.And;
import cucumber.annotation.en.Then;
import cucumber.table.DataTable;

public class CommonPharmacySteps {
    @And("^\"([^\"]*)\" Customer verifies Prescription Records in Print Prescription Records Page:$")
    public void Customer_verifies_Prescription_Records_in_Print_Prescription_Records_Page(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData((arg2));
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer verifies Prescription Records in Print Prescription Records Page");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.printPrescriptionRecordsValidation(browser, step, dataMap);
	} catch (Exception e) {
	    CommonLibrary.LogIt(e, null, step);
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }

    @Then("^\"([^\"]*)\" Customer checks Drug Interaction from Check Drug Interactions page:$")
    public void Customer_checks_Drug_Interaction_from_Check_Drug_Interactions_page(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData(arg2);
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer checks Drug Interaction from Check Drug Interactions page:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.checkDrugInteractionResults(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }

    @Then("^\"([^\"]*)\" Customer checks whether the user is unmatched user or matched user in Verify your Identity page:$")
    public void Customer_checks_whether_the_user_is_unmatched_user_or_matched_user_in_Verify_your_Identity_page(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData(arg2);
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer checks whether the user is unmatched user or matched user in Verify your Identity page:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.matchedOrUnmatchedUserValidation(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer selects prescriptions in the refill prescription faster overlay:$")
    public void Customer_selects_prescriptions_in_the_refill_prescription_faster_overlay(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData(arg2);
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer selects prescriptions in the refill prescription faster overlay:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.PrescriptionSelectionInRefillRxFasterOverlay(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer verifies the display of Restriction message on selection of prescriptions:$")
    public void Customer_verifies_the_display_of_Restriction_message_on_selection_of_prescriptions(String arg1) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	
	try {
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer verifies the display of Restriction message on selection of prescriptions:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.PrescriptionSelectionRestrictionMsg(browser, step);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer verfies Express Pay details in Rx Settings page:$")
    public void Customer_verfies_Express_Pay_details_in_Rx_Settings_page(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData(arg2);
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer verfies Express Pay details in Rx Settings page:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.ExpressPayVerificationInRxSettings(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer verifies As Is State:$")
    public void Customer_verifies_As_Is_State(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData(arg2);
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer verifies As Is State:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.AsIsStateVerification(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer validates the presence of pill image and clicks on the image:$")
	public void Customer_validates_the_presence_of_pill_image_and_clicks_on_the_image(String arg1,DataTable arg2){
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData(arg2);
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer validates the presence of pill image and clicks on the image:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    RefillHubLibrary.PillImageVerificationInRefillHub(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
}

    @And("^\"([^\"]*)\" Customer verifies whether the checkbox is preselected or not:$")
    public void Customer_verifies_whether_the_checkbox_is_preselected_or_not(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData((arg2));
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer verifies whether the checkbox is preselected or not: ");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    HomePageLinksAndUIValidationLibrary.hepatitisSupportCheckBoxVerification(browser, step, dataMap);
	} catch (Exception e) {
	    CommonLibrary.LogIt(e, null, step);
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer clicks on an object and validates the expected page URL in new window:$")
    public void Customer_clicks_on_an_object_and_validates_the_expected_page_URL_in_new_window(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData((arg2));
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer clicks on an object and validates the expected page URL in new window");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    HomePageLinksAndUIValidationLibrary.verifyLinkNavigationInNewPage(browser, step, dataMap);
	} catch (Exception e) {
	    CommonLibrary.LogIt(e, null, step);
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    @Then("^\"([^\"]*)\" Validate the absence of overlay in new prescriptions page:$")
	public void Validate_the_absence_of_overlay_in_new_prescriptions_page(String arg1){
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	try {
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Validate the absence of overlay in new prescriptions page:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.overlayAbsenceVerification(browser, step);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
}
    
    @Then("^\"([^\"]*)\" Customer enters Cardholder Information:$")
    public void Customer_enters_Cardholder_Information(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData((arg2));
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer enters Cardholder Information:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.enteringCardholderInformation(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer validates the MailService page:$")
    public void Customer_validates_the_MailService_page(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData((arg2));
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer validates the MailService page:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.validateMSRxPage(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer validates the SearchResults page for DrugSearch:$")
    public void Customer_validates_the_SearchResults_page_for_DrugSearch(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData((arg2));
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer validates the SearchResults page for DrugSearch:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.validateDrugSearchPage(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
    
    @Then("^\"([^\"]*)\" Customer verifies the 340B Landing Page functionality:$")
	public void Customer_verifies_the_340B_Landing_Page_functionality(String arg1) {
		EventFiringWebDriver browser = null;
		ScenarioBean scenario = null;
		StepBean step = null;
		
		try {
		    scenario = CommonLibrary.getScenario(arg1);
		    step = new StepBean();
		    step.setStepName("Customer verifies the 340B Landing Page functionality:");
		    scenario.getStepBeans().add(step);
		    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
		    CommonPharmacyLibrary.ThreeFortyBLandingPage(browser,step);
		} catch (Exception e) {
		    CommonLibrary.LogIt(e, null, step);
		} finally {
		    CommonLibrary.ReportIt(browser, scenario, step);
		}
	}
    
    @Then("^\"([^\"]*)\" Customer validates sorting of the refillfast overlay columns:$")
    public void Customer_validates_sorting_of_the_refillfast_overlay_columns(String arg1, DataTable arg2) {
	EventFiringWebDriver browser = null;
	ScenarioBean scenario = null;
	StepBean step = null;
	Map<String, List<String>> dataMap = null;
	try {
	    dataMap = CommonLibrary.getHorizontalData((arg2));
	    scenario = CommonLibrary.getScenario(arg1);
	    step = new StepBean();
	    step.setStepName("Customer validates sorting of the refillfast overlay columns:");
	    scenario.getStepBeans().add(step);
	    browser = CommonLibrary.getBrowser(Thread.currentThread().getId());
	    CommonPharmacyLibrary.refillfastSortingVerification(browser, step, dataMap);
	} catch (Exception e) {
	    e.printStackTrace();
	} finally {
	    CommonLibrary.ReportIt(browser, scenario, step);
	}
    }
}
